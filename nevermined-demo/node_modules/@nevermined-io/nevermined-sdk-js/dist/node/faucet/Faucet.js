"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Faucet = void 0;
const Instantiable_abstract_1 = require("../Instantiable.abstract");
class Faucet extends Instantiable_abstract_1.Instantiable {
    get url() {
        return this.config.faucetUri;
    }
    constructor(config) {
        super();
        this.setInstanceConfig(config);
    }
    requestEth(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = {
                address: address,
                agent: 'sdk-js',
            };
            try {
                const response = yield this.nevermined.utils.fetch.post(this.getFaucetEndpoint(), decodeURI(JSON.stringify(args)));
                if (!response.ok) {
                    throw new Error('HTTP request failed');
                }
                return yield response.text();
            }
            catch (e) {
                this.logger.error(e);
                throw new Error('HTTP request failed');
            }
        });
    }
    getFaucetEndpoint() {
        return `${this.url}/faucet`;
    }
}
exports.Faucet = Faucet;
//# sourceMappingURL=Faucet.js.map