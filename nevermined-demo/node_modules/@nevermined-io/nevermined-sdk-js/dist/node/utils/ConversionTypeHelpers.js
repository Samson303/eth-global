"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.didZeroX = exports.didTransformer = exports.noDidPrefixed = exports.didPrefixed = exports.zeroXTransformer = exports.noZeroX = exports.zeroX = void 0;
const Logger_1 = require("./Logger");
exports.zeroX = (input) => zeroXTransformer(input, true);
exports.noZeroX = (input) => zeroXTransformer(input, false);
function zeroXTransformer(input = '', zeroOutput) {
    const { valid, output } = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer');
    return (zeroOutput && valid ? '0x' : '') + output;
}
exports.zeroXTransformer = zeroXTransformer;
exports.didPrefixed = (input) => didTransformer(input, true);
exports.noDidPrefixed = (input) => didTransformer(input, false);
function didTransformer(input = '', prefixOutput) {
    const { valid, output } = inputMatch(input, /^(?:0x|did:nv:)*([a-f0-9]{64})$/i, 'didTransformer');
    return (prefixOutput && valid ? 'did:nv:' : '') + output;
}
exports.didTransformer = didTransformer;
exports.didZeroX = (input) => exports.zeroX(exports.noDidPrefixed(input));
function inputMatch(input, regexp, conversorName) {
    if (typeof input !== 'string') {
        Logger_1.LoggerInstance.debug('Not input string:');
        Logger_1.LoggerInstance.debug(input);
        throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`);
    }
    const match = input.match(regexp);
    if (!match) {
        Logger_1.LoggerInstance.warn(`[${conversorName}] Input transformation failed.`);
        return { valid: false, output: input };
    }
    return { valid: true, output: match[1] };
}
//# sourceMappingURL=ConversionTypeHelpers.js.map