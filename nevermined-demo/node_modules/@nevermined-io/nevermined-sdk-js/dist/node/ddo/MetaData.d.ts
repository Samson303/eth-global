export interface StageRequirements {
    container: {
        image: string;
        tag: string;
        checksum: string;
    };
}
export interface StageInput {
    index: number;
    id: string;
}
export interface StageTransformation {
    id: string;
}
export interface StageOutput {
    metadataUrl: string;
    secretStoreUrl: string;
    accessProxyUrl: string;
    metadata: MetaDataMain;
}
export interface Stage {
    index: number;
    stageType?: string;
    requirements: StageRequirements;
    input: StageInput;
    transformation: StageTransformation;
    output: StageOutput;
}
export interface Workflow {
    stages: Stage[];
}
export interface Algorithm {
    language: string;
    format?: string;
    version?: string;
    entrypoint: string;
    requirements: {
        requirement?: string;
        version?: string;
        container?: any;
    };
}
export interface ServiceDefinition {
    auth: {
        type: string;
        user?: string;
        password?: string;
        token?: string;
    };
    endpoints: {
        index: number;
        url: string;
        method: string;
        contentTypes: string[];
    };
}
export interface Service {
    spec?: string;
    specChecksum?: string;
    definition: ServiceDefinition;
}
export interface File {
    name?: string;
    url: string;
    index?: number;
    contentType: string;
    checksum?: string;
    checksumType?: string;
    contentLength?: string;
    resourceId?: string;
    encoding?: string;
    compression?: string;
}
export interface MetaDataMain {
    name: string;
    type: 'dataset' | 'algorithm' | 'compute' | 'workflow' | 'compute';
    dateCreated: string;
    datePublished?: string;
    author: string;
    license: string;
    price: string;
    files?: File[];
    encryptedService?: any;
    workflow?: Workflow;
    algorithm?: Algorithm;
    service?: Service;
}
export interface Curation {
    rating: number;
    numVotes: number;
    schema?: string;
    isListed?: boolean;
}
export interface AdditionalInformation {
    description?: string;
    copyrightHolder?: string;
    workExample?: string;
    links?: {
        [name: string]: string;
    }[];
    inLanguage?: string;
    categories?: string[];
    tags?: string[];
    updateFrequency?: string;
    structuredMarkup?: {
        uri: string;
        mediaType: string;
    }[];
}
export interface MetaData {
    main: MetaDataMain;
    encryptedFiles?: string;
    additionalInformation?: AdditionalInformation;
    curation?: Curation;
}
