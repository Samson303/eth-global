import { Nevermined } from '../nevermined/Nevermined';
import { Authentication } from './Authentication';
import { Proof } from './Proof';
import { PublicKey } from './PublicKey';
import { Service, ServiceType } from './Service';
export declare class DDO {
    static serialize(ddo: DDO): string;
    static deserialize(ddoString: string): DDO;
    '@context': string;
    id: string;
    created: string;
    publicKey: PublicKey[];
    authentication: Authentication[];
    service: Service[];
    proof: Proof;
    constructor(ddo?: Partial<DDO>);
    shortId(): string;
    findServiceById<T extends ServiceType>(index: number): Service<T>;
    findServiceByType<T extends ServiceType>(serviceType: T): Service<T>;
    checksum(seed: any): string;
    generateProof(nevermined: Nevermined, publicKey: string, password?: string): Promise<Proof>;
    addProof(nevermined: Nevermined, publicKey: string, password?: string): Promise<void>;
    addService(nevermined: Nevermined, service: any): Promise<void>;
    updateService(nevermined: Nevermined, service: any): Promise<void>;
    assignDid(checksum: any): Promise<void>;
    generateDid(seed: any): Promise<string>;
    addSignature(nevermined: Nevermined, publicKey: string, password?: string): Promise<void>;
}
