"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NeverminedSecretStore = void 0;
const secret_store_client_1 = __importDefault(require("@nevermined-io/secret-store-client"));
const utils_1 = require("../utils");
const Instantiable_abstract_1 = require("../Instantiable.abstract");
class NeverminedSecretStore extends Instantiable_abstract_1.Instantiable {
    static getInstance(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const instance = new NeverminedSecretStore();
            instance.setInstanceConfig(config);
            return instance;
        });
    }
    encrypt(did, document, publisher) {
        return __awaiter(this, void 0, void 0, function* () {
            const signature = (yield publisher.getToken()) ||
                (yield this.nevermined.utils.signature.signText(utils_1.noDidPrefixed(did), publisher.getId(), publisher.getPassword()));
            return this.nevermined.gateway.secretStoreEncrypt(utils_1.noDidPrefixed(did), signature, document, publisher.getId());
        });
    }
    decrypt(did, content, consumer, secretStoreUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getSecretStoreByAccount(consumer, secretStoreUrl).decryptDocument(utils_1.noDidPrefixed(did), content);
        });
    }
    getSecretStoreByAccount(account, secretStoreUrl) {
        const config = Object.assign({}, this.config);
        if (account) {
            config.address = account.getId();
        }
        if (account && account.getPassword()) {
            config.password = account.getPassword();
        }
        if (secretStoreUrl) {
            config.secretStoreUri = secretStoreUrl;
        }
        return this.getSecretStore(config);
    }
    getSecretStore(config) {
        const { secretStoreUri, parityUri, password, address, threshold } = config;
        config = { secretStoreUri, parityUri, password, address, threshold };
        return new secret_store_client_1.default(config);
    }
}
exports.NeverminedSecretStore = NeverminedSecretStore;
//# sourceMappingURL=NeverminedSecretStore.js.map