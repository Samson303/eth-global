import Account from './Account';
import { Instantiable, InstantiableConfig } from '../Instantiable.abstract';
import { AgreementConditionsStatus } from '../keeper/contracts/templates/AgreementTemplate.abstract';
import { ConditionState } from '../keeper/contracts/conditions/Condition.abstract';
import { AgreementsConditions } from './AgreementsConditions';
export interface AgreementPrepareResult {
    agreementId: string;
    signature: string;
}
export declare class Agreements extends Instantiable {
    static getInstance(config: InstantiableConfig): Promise<Agreements>;
    conditions: AgreementsConditions;
    prepare(did: string, index: number, consumer: Account): Promise<AgreementPrepareResult>;
    create(did: string, agreementId: string, index: number, consumer: Account, publisher: Account): Promise<boolean>;
    status(agreementId: string, extended?: false): Promise<{
        [condition: string]: ConditionState;
    }>;
    status(agreementId: string, extended: true): Promise<AgreementConditionsStatus>;
    isAccessGranted(agreementId: string, did: string, consumer: string, account: Account): Promise<boolean>;
}
