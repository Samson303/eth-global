"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Accounts = void 0;
const Account_1 = __importDefault(require("./Account"));
const Instantiable_abstract_1 = require("../Instantiable.abstract");
class Accounts extends Instantiable_abstract_1.Instantiable {
    static getInstance(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const instance = new Accounts();
            instance.setInstanceConfig(config);
            return instance;
        });
    }
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            const ethAccounts = yield this.web3.eth.getAccounts();
            const accountPromises = ethAccounts.map(address => new Account_1.default(address, this.instanceConfig));
            return Promise.all(accountPromises);
        });
    }
    balance(account) {
        return account.getBalance();
    }
    requestTokens(account, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield account.requestTokens(amount);
                return true;
            }
            catch (e) {
                return false;
            }
        });
    }
    requestEthFromFaucet(address) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.nevermined.faucet.requestEth(address);
                return true;
            }
            catch (e) {
                return false;
            }
        });
    }
}
exports.Accounts = Accounts;
//# sourceMappingURL=Accounts.js.map