"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const Instantiable_abstract_1 = require("../Instantiable.abstract");
class Account extends Instantiable_abstract_1.Instantiable {
    constructor(id = '0x0', config) {
        super();
        this.id = id;
        if (config) {
            this.setInstanceConfig(config);
        }
    }
    getId() {
        return this.id;
    }
    setId(id) {
        this.id = id;
    }
    setPassword(password) {
        this.password = password;
    }
    getPassword() {
        return this.password;
    }
    setToken(token) {
        this.token = token;
    }
    getToken() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.token || this.nevermined.auth.restore(this);
        });
    }
    isTokenStored() {
        return this.nevermined.auth.isStored(this);
    }
    authenticate() {
        return this.nevermined.auth.store(this);
    }
    getNeverminedBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            const { token } = this.nevermined.keeper;
            return (yield token.balanceOf(this.id)) / Math.pow(10, (yield token.decimals()));
        });
    }
    getEtherBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.web3.eth
                .getBalance(this.id, 'latest')
                .then((balance) => {
                return new bignumber_js_1.default(balance).toNumber();
            });
        });
    }
    getBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                eth: yield this.getEtherBalance(),
                nevermined: yield this.getNeverminedBalance()
            };
        });
    }
    requestTokens(amount) {
        return __awaiter(this, void 0, void 0, function* () {
            amount = String(amount);
            if (!this.nevermined.keeper.dispenser) {
                throw new Error('Dispenser not available on this network.');
            }
            try {
                yield this.nevermined.keeper.dispenser.requestTokens(amount, this.id);
            }
            catch (e) {
                this.logger.error(e);
                throw new Error('Error requesting tokens');
            }
            return amount;
        });
    }
}
exports.default = Account;
//# sourceMappingURL=Account.js.map