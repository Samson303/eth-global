import Account from './Account';
import { Instantiable, InstantiableConfig } from '../Instantiable.abstract';
import { ProvenanceMethod } from '../keeper/contracts/DIDRegistry';
export declare class Provenance extends Instantiable {
    static getInstance(config: InstantiableConfig): Promise<Provenance>;
    getProvenanceEntry(provenanceId: string): Promise<import("../keeper/contracts/DIDRegistry").ProvenanceRegistry>;
    used(provenanceId: string, did: string, agentId: string, activityId: string, signature: string, attributes: string, from: Account): Promise<boolean>;
    wasDerivedFrom(provenanceId: string, newEntityDid: string, usedEntityDid: string, agentId: string, activityId: string, attributes: string, from: Account): Promise<boolean>;
    wasAssociatedWith(provenanceId: string, did: string, agentId: string, activityId: string, attributes: string, from: Account): Promise<boolean>;
    actedOnBehalf(provenanceId: string, did: string, delegateAgentId: string, responsibleAgentId: string, activityId: string, signature: string, attributes: string, from: Account): Promise<boolean>;
    addDidProvenanceDelegate(did: string, delegated: string, from: Account): Promise<boolean>;
    removeDidProvenanceDelegate(did: string, delegated: string, from: Account): Promise<boolean>;
    isProvenanceDelegate(did: string, delegated: string): Promise<unknown>;
    getProvenanceOwner(did: string): Promise<unknown>;
    getDIDProvenanceEvents(did: string): Promise<{
        method: number;
        provId: string;
        did: string;
        agentId: string;
        activityId: string;
        relatedDid: string;
        agentInvolvedId: string;
        attributes: string;
        blockNumberUpdated: number;
    }[]>;
    getProvenanceMethodEvents<T extends ProvenanceMethod>(method: T, did: string): Promise<import("../keeper/contracts/DIDRegistry").ProvenanceEvent<T>[]>;
}
