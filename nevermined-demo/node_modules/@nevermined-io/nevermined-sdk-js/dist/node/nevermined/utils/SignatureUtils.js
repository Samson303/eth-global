"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureUtils = void 0;
const Instantiable_abstract_1 = require("../../Instantiable.abstract");
class SignatureUtils extends Instantiable_abstract_1.Instantiable {
    constructor(config) {
        super();
        this.setInstanceConfig(config);
    }
    signText(text, publicKey, password) {
        return __awaiter(this, void 0, void 0, function* () {
            const isMetaMask = this.web3 &&
                this.web3.currentProvider &&
                this.web3.currentProvider.isMetaMask;
            try {
                return yield this.web3.eth.personal.sign(text, publicKey, password);
            }
            catch (e) {
                if (isMetaMask) {
                    throw e;
                }
                this.logger.warn('Error on personal sign.');
                this.logger.warn(e);
                try {
                    return yield this.web3.eth.sign(text, publicKey);
                }
                catch (e2) {
                    this.logger.error('Error on sign.');
                    this.logger.error(e2);
                    throw new Error('Error executing personal sign');
                }
            }
        });
    }
    verifyText(text, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.web3.eth.personal.ecRecover(text, signature);
        });
    }
}
exports.SignatureUtils = SignatureUtils;
//# sourceMappingURL=SignatureUtils.js.map