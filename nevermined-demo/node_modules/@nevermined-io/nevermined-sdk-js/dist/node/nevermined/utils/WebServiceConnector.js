"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebServiceConnector = void 0;
const fs_1 = __importDefault(require("fs"));
const Instantiable_abstract_1 = require("../../Instantiable.abstract");
const fetch = require('node-fetch');
const save = require("save-file");
class WebServiceConnector extends Instantiable_abstract_1.Instantiable {
    constructor(config) {
        super();
        this.setInstanceConfig(config);
    }
    post(url, payload, headers = {}) {
        return this.fetch(url, {
            method: 'POST',
            body: payload,
            headers: Object.assign({ 'Content-type': 'application/json' }, headers)
        });
    }
    get(url, headers = {}) {
        return this.fetch(url, {
            method: 'GET',
            headers: Object.assign({ 'Content-type': 'application/json' }, headers)
        });
    }
    put(url, payload, headers = {}) {
        return this.fetch(url, {
            method: 'PUT',
            body: payload,
            headers: Object.assign({ 'Content-type': 'application/json' }, headers)
        });
    }
    delete(url, payload, headers = {}) {
        return this.fetch(url, {
            method: 'DELETE',
            body: payload,
            headers: Object.assign({ 'Content-type': 'application/json' }, headers)
        });
    }
    downloadFile(url, destination, index, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.get(url, headers);
            if (!response.ok) {
                throw new Error('Response error.');
            }
            let filename;
            try {
                filename = response.headers
                    .get('content-disposition')
                    .match(/attachment;filename=(.+)/)[1];
            }
            catch (_a) {
                try {
                    filename = url.split('/').pop();
                }
                catch (_b) {
                    filename = `file${index}`;
                }
            }
            if (destination) {
                yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    fs_1.default.mkdirSync(destination, { recursive: true });
                    const fileStream = fs_1.default.createWriteStream(`${destination}${filename}`);
                    response.body.pipe(fileStream);
                    response.body.on('error', reject);
                    fileStream.on('finish', resolve);
                }));
                return destination;
            }
            else {
                save(yield response.arrayBuffer(), filename);
            }
        });
    }
    fetch(url, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield fetch(url, opts);
            if (!result.ok) {
                this.logger.error(`Error requesting [${opts.method}] ${url}`);
                this.logger.error(`Response message: \n${yield result.text()}`);
                throw result;
            }
            return result;
        });
    }
}
exports.WebServiceConnector = WebServiceConnector;
//# sourceMappingURL=WebServiceConnector.js.map