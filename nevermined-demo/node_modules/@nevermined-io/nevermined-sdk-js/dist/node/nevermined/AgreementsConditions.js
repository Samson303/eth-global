"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgreementsConditions = void 0;
const Instantiable_abstract_1 = require("../Instantiable.abstract");
class AgreementsConditions extends Instantiable_abstract_1.Instantiable {
    static getInstance(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const instance = new AgreementsConditions();
            instance.setInstanceConfig(config);
            return instance;
        });
    }
    lockReward(agreementId, amount, from) {
        return __awaiter(this, void 0, void 0, function* () {
            const { lockRewardCondition, escrowReward } = this.nevermined.keeper.conditions;
            try {
                yield this.nevermined.keeper.token.approve(lockRewardCondition.getAddress(), amount, from.getId());
                const receipt = yield lockRewardCondition.fulfill(agreementId, escrowReward.getAddress(), amount, from && from.getId());
                return !!receipt.events.Fulfilled;
            }
            catch (_a) {
                return false;
            }
        });
    }
    grantAccess(agreementId, did, grantee, from) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { accessSecretStoreCondition } = this.nevermined.keeper.conditions;
                const receipt = yield accessSecretStoreCondition.fulfill(agreementId, did, grantee, from && from.getId());
                return !!receipt.events.Fulfilled;
            }
            catch (_a) {
                return false;
            }
        });
    }
    grantServiceExecution(agreementId, did, grantee, from) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { computeExecutionCondition } = this.nevermined.keeper.conditions;
                const receipt = yield computeExecutionCondition.fulfill(agreementId, did, grantee, from && from.getId());
                return !!receipt.events.Fulfilled;
            }
            catch (_a) {
                return false;
            }
        });
    }
    releaseReward(agreementId, amounts, receivers, did, consumer, publisher, from) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { escrowReward, accessSecretStoreCondition, lockRewardCondition } = this.nevermined.keeper.conditions;
                const totalAmount = amounts.reduce((a, b) => a + b, 0);
                const conditionIdAccess = yield accessSecretStoreCondition.generateIdHash(agreementId, did, consumer);
                const conditionIdLock = yield lockRewardCondition.generateIdHash(agreementId, escrowReward.getAddress(), totalAmount);
                const receipt = yield escrowReward.fulfill(agreementId, amounts, receivers, publisher, conditionIdLock, conditionIdAccess, from && from.getId());
                return !!receipt.events.Fulfilled;
            }
            catch (_a) {
                return false;
            }
        });
    }
}
exports.AgreementsConditions = AgreementsConditions;
//# sourceMappingURL=AgreementsConditions.js.map