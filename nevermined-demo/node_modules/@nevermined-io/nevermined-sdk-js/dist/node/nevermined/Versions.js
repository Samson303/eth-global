"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Versions = exports.PlatformTechStatus = void 0;
const keeperPackageJson = __importStar(require("@nevermined-io/contracts/package.json"));
const metadata = __importStar(require("../metadata.json"));
const Instantiable_abstract_1 = require("../Instantiable.abstract");
var PlatformTechStatus;
(function (PlatformTechStatus) {
    PlatformTechStatus["Loading"] = "Loading";
    PlatformTechStatus["Unknown"] = "Unknown";
    PlatformTechStatus["Stopped"] = "Stopped";
    PlatformTechStatus["Working"] = "Working";
})(PlatformTechStatus = exports.PlatformTechStatus || (exports.PlatformTechStatus = {}));
class Versions extends Instantiable_abstract_1.Instantiable {
    static getInstance(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const instance = new Versions();
            instance.setInstanceConfig(config);
            return instance;
        });
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const versions = {};
            versions.sdk = {
                name: 'Sdk-js',
                version: metadata.version,
                commit: metadata.commit,
                status: PlatformTechStatus.Working,
                network: (yield this.nevermined.keeper.getNetworkName()).toLowerCase(),
                keeperVersion: keeperPackageJson.version,
                contracts: Object.values(yield this.nevermined.keeper.getAllInstances())
                    .filter(_ => !!_)
                    .reduce((acc, { contractName, address }) => (Object.assign(Object.assign({}, acc), { [contractName]: address })), {})
            };
            try {
                const { contracts, 'keeper-version': keeperVersion, network, software: name, version } = yield this.nevermined.gateway.getVersionInfo();
                versions.gateway = {
                    name,
                    status: PlatformTechStatus.Working,
                    version,
                    contracts,
                    network,
                    keeperVersion: keeperVersion.replace(/^v/, '')
                };
            }
            catch (_a) {
                versions.gateway = {
                    name: 'Gateway',
                    status: PlatformTechStatus.Stopped
                };
            }
            try {
                const { software: name, version } = yield this.nevermined.metadata.getVersionInfo();
                versions.metadata = {
                    name,
                    status: PlatformTechStatus.Working,
                    version
                };
            }
            catch (_b) {
                versions.metadata = {
                    name: 'Metadata',
                    status: PlatformTechStatus.Stopped
                };
            }
            const techs = Object.values(versions);
            const networks = techs
                .map(({ network }) => network)
                .filter(_ => !!_)
                .reduce((acc, network) => (Object.assign(Object.assign({}, acc), { [network]: true })), {});
            let contractStatus = true;
            const contractList = techs.map(({ contracts }) => contracts).filter(_ => !!_);
            Array.from(contractList.map(Object.keys))
                .reduce((acc, _) => [...acc, ..._], [])
                .filter((_, i, list) => list.indexOf(_) === i)
                .forEach(name => {
                let address;
                contractList
                    .map(_ => _[name])
                    .forEach(_ => {
                    if (!address) {
                        address = _;
                        return;
                    }
                    if (address !== _) {
                        this.logger.warn(`Error on contract ${name}`);
                        contractStatus = false;
                    }
                });
            });
            versions.status = {
                ok: !techs.find(({ status }) => status !== PlatformTechStatus.Working),
                network: Object.keys(networks).length === 1,
                contracts: contractStatus
            };
            return versions;
        });
    }
}
exports.Versions = Versions;
//# sourceMappingURL=Versions.js.map