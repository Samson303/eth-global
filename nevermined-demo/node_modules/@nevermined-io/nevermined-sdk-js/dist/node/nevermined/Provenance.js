"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Provenance = void 0;
const Instantiable_abstract_1 = require("../Instantiable.abstract");
class Provenance extends Instantiable_abstract_1.Instantiable {
    static getInstance(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const instance = new Provenance();
            instance.setInstanceConfig(config);
            return instance;
        });
    }
    getProvenanceEntry(provenanceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.nevermined.keeper.didRegistry.getProvenanceEntry(provenanceId);
        });
    }
    used(provenanceId, did, agentId, activityId, signature, attributes, from) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.nevermined.keeper.didRegistry.used(provenanceId, did, agentId, activityId, signature, attributes, from.getId());
            return true;
        });
    }
    wasDerivedFrom(provenanceId, newEntityDid, usedEntityDid, agentId, activityId, attributes, from) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.nevermined.keeper.didRegistry.wasDerivedFrom(provenanceId, newEntityDid, usedEntityDid, agentId, activityId, attributes, from.getId());
            return true;
        });
    }
    wasAssociatedWith(provenanceId, did, agentId, activityId, attributes, from) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.nevermined.keeper.didRegistry.wasAssociatedWith(provenanceId, did, agentId, activityId, attributes, from.getId());
            return true;
        });
    }
    actedOnBehalf(provenanceId, did, delegateAgentId, responsibleAgentId, activityId, signature, attributes, from) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.nevermined.keeper.didRegistry.actedOnBehalf(provenanceId, did, delegateAgentId, responsibleAgentId, activityId, signature, attributes, from.getId());
            return true;
        });
    }
    addDidProvenanceDelegate(did, delegated, from) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.nevermined.keeper.didRegistry.addDidProvenanceDelegate(did, delegated, from.getId());
            return true;
        });
    }
    removeDidProvenanceDelegate(did, delegated, from) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.nevermined.keeper.didRegistry.removeDidProvenanceDelegate(did, delegated, from.getId());
            return true;
        });
    }
    isProvenanceDelegate(did, delegated) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.nevermined.keeper.didRegistry.isProvenanceDelegate(did, delegated);
        });
    }
    getProvenanceOwner(did) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.nevermined.keeper.didRegistry.getProvenanceOwner(did);
        });
    }
    getDIDProvenanceEvents(did) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.nevermined.keeper.didRegistry.getDIDProvenanceEvents(did);
        });
    }
    getProvenanceMethodEvents(method, did) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.nevermined.keeper.didRegistry.getDIDProvenanceMethodEvents(did, method);
        });
    }
}
exports.Provenance = Provenance;
//# sourceMappingURL=Provenance.js.map