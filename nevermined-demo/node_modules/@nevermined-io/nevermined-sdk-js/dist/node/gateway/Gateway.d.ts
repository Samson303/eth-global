import { File } from '../ddo/MetaData';
import Account from '../nevermined/Account';
import { Instantiable, InstantiableConfig } from '../Instantiable.abstract';
export declare class Gateway extends Instantiable {
    private get url();
    constructor(config: InstantiableConfig);
    getVersionInfo(): Promise<any>;
    getPurchaseEndpoint(): string;
    getConsumeEndpoint(): string;
    getAccessEndpoint(): string;
    getComputeLogsEndpoint(serviceAgreementId: string, executionId: string): string;
    getComputeStatusEndpoint(serviceAgreementId: string, executionId: string): string;
    getExecuteEndpoint(serviceAgreementId: string): string;
    getExecutionEndpoint(): string;
    getSecretStoreEncryptEndpoint(): string;
    getEncryptEndpoint(): string;
    getFetchTokenEndpoint(): string;
    getGatewayInfo(): Promise<any>;
    getRsaPublicKey(): Promise<any>;
    getEcdsaPublicKey(): Promise<any>;
    getDownloadEndpoint(): string;
    initializeServiceAgreement(did: string, serviceAgreementId: string, serviceIndex: number, signature: string, consumerAddress: string): Promise<any>;
    consumeService(did: string, agreementId: string, serviceEndpoint: string, account: Account, files: File[], destination: string, index?: number): Promise<string>;
    secretStoreEncrypt(did: string, signature: string, document: any, publisher: string): Promise<string>;
    encrypt(did: any, document: any, method: any): Promise<any>;
    execute(agreementId: string, computeDid: string, workflowDid: string, account: Account): Promise<any>;
    downloadService(did: string, account: Account, files: File[], destination: string, index?: number): Promise<string>;
    computeLogs(agreementId: string, executionId: string, account: Account): Promise<any>;
    computeStatus(agreementId: string, executionId: string, account: Account): Promise<any>;
    fetchToken(grantToken: string): Promise<string>;
}
