"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Instantiable_abstract_1 = require("../Instantiable.abstract");
class ContractHandler extends Instantiable_abstract_1.Instantiable {
    constructor(config) {
        super();
        this.setInstanceConfig(config);
    }
    static getContract(what, networkId) {
        return ContractHandler.contracts.get(this.getHash(what, networkId));
    }
    static setContract(what, networkId, contractInstance) {
        ContractHandler.contracts.set(this.getHash(what, networkId), contractInstance);
    }
    static hasContract(what, networkId) {
        return ContractHandler.contracts.has(this.getHash(what, networkId));
    }
    static getHash(what, networkId) {
        return `${what}/#${networkId}`;
    }
    get(what, optional = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const where = (yield this.nevermined.keeper.getNetworkName()).toLowerCase();
            const networkId = yield this.nevermined.keeper.getNetworkId();
            try {
                return (ContractHandler.getContract(what, networkId) ||
                    (yield this.load(what, where, networkId)));
            }
            catch (err) {
                if (!optional) {
                    this.logger.error('Failed to load', what, 'from', where, err);
                }
                throw err;
            }
        });
    }
    load(what, where, networkId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.debug('Loading', what, 'from', where);
            const artifact = require(`@nevermined-io/contracts/artifacts/${what}.${where}.json`);
            const code = yield this.web3.eth.getCode(artifact.address);
            if (code === '0x0') {
                throw new Error(`No code deployed at address ${artifact.address}, sorry.`);
            }
            const contract = new this.web3.eth.Contract(artifact.abi, artifact.address);
            this.logger.debug('Getting instance of', what, 'from', where, 'at address', artifact.address);
            ContractHandler.setContract(what, networkId, contract);
            return ContractHandler.getContract(what, networkId);
        });
    }
}
exports.default = ContractHandler;
ContractHandler.contracts = new Map();
//# sourceMappingURL=ContractHandler.js.map