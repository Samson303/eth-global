"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Keeper = void 0;
const DIDRegistry_1 = __importDefault(require("./contracts/DIDRegistry"));
const Dispenser_1 = __importDefault(require("./contracts/Dispenser"));
const Token_1 = __importDefault(require("./contracts/Token"));
const conditions_1 = require("./contracts/conditions");
const templates_1 = require("./contracts/templates");
const managers_1 = require("./contracts/managers");
const utils_1 = require("../utils");
const EventHandler_1 = require("./EventHandler");
const Instantiable_abstract_1 = require("../Instantiable.abstract");
class Keeper extends Instantiable_abstract_1.Instantiable {
    constructor() {
        super(...arguments);
        this.connected = false;
    }
    static getInstance(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const keeper = new Keeper();
            keeper.setInstanceConfig(config);
            config.nevermined.keeper = keeper;
            keeper.instances = {};
            try {
                keeper.instances = yield utils_1.objectPromiseAll({
                    dispenser: undefined,
                    token: undefined,
                    didRegistry: DIDRegistry_1.default.getInstance(config),
                    templateStoreManager: managers_1.TemplateStoreManager.getInstance(config),
                    agreementStoreManager: managers_1.AgreementStoreManager.getInstance(config),
                    conditionStoreManager: managers_1.ConditionStoreManager.getInstance(config),
                    lockRewardCondition: conditions_1.LockRewardCondition.getInstance(config),
                    escrowReward: conditions_1.EscrowReward.getInstance(config),
                    accessSecretStoreCondition: conditions_1.AccessSecretStoreCondition.getInstance(config),
                    computeExecutionCondition: conditions_1.ComputeExecutionCondition.getInstance(config),
                    escrowAccessSecretStoreTemplate: templates_1.EscrowAccessSecretStoreTemplate.getInstance(config),
                    escrowComputeExecutionTemplate: templates_1.EscrowComputeExecutionTemplate.getInstance(config)
                });
                keeper.connected = true;
            }
            catch (_a) {
                keeper.connected = false;
                return;
            }
            try {
                keeper.instances.dispenser = yield Dispenser_1.default.getInstance(config);
            }
            catch (_b) {
                keeper.logger.warn('Dispenser not available on this network.');
            }
            try {
                keeper.instances.token = yield Token_1.default.getInstance(config);
            }
            catch (_c) {
                keeper.logger.warn('Token not available on this network.');
            }
            keeper.dispenser = keeper.instances.dispenser;
            keeper.token = keeper.instances.token;
            keeper.didRegistry = keeper.instances.didRegistry;
            keeper.templateStoreManager = keeper.instances.templateStoreManager;
            keeper.agreementStoreManager = keeper.instances.agreementStoreManager;
            keeper.conditionStoreManager = keeper.instances.conditionStoreManager;
            keeper.conditions = {
                lockRewardCondition: keeper.instances.lockRewardCondition,
                escrowReward: keeper.instances.escrowReward,
                accessSecretStoreCondition: keeper.instances.accessSecretStoreCondition,
                computeExecutionCondition: keeper.instances.computeExecutionCondition
            };
            keeper.templates = {
                escrowAccessSecretStoreTemplate: keeper.instances.escrowAccessSecretStoreTemplate,
                escrowComputeExecutionTemplate: keeper.instances.escrowComputeExecutionTemplate
            };
            keeper.utils = {
                eventHandler: new EventHandler_1.EventHandler(config)
            };
            return keeper;
        });
    }
    getConditionByAddress(address) {
        return Object.values(this.conditions).find(condition => condition.getAddress() === address);
    }
    getTemplateByName(name) {
        return Object.values(this.templates).find(template => template.contractName === name);
    }
    getTemplateByAddress(address) {
        return Object.values(this.templates).find(template => template.getAddress() === address);
    }
    getNetworkId() {
        return this.web3.eth.net.getId();
    }
    getNetworkName() {
        return this.web3.eth.net.getId().then((networkId) => {
            switch (networkId) {
                case 1:
                    return 'Main';
                case 2:
                    return 'Morden';
                case 3:
                    return 'Ropsten';
                case 4:
                    return 'Rinkeby';
                case 77:
                    return 'POA_Sokol';
                case 99:
                    return 'POA_Core';
                case 42:
                    return 'Kovan';
                case 100:
                    return 'xDai';
                case 2199:
                    return 'Duero';
                case 8996:
                    return 'Spree';
                case 8995:
                    return 'Nile';
                case 0xcea11:
                    return 'Pacific';
                default:
                    return 'Development';
            }
        });
    }
    getAllInstances() {
        return this.instances;
    }
}
exports.Keeper = Keeper;
exports.default = Keeper;
//# sourceMappingURL=Keeper.js.map