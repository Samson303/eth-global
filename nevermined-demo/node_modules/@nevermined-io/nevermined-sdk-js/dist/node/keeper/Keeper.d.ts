import DIDRegistry from './contracts/DIDRegistry';
import Dispenser from './contracts/Dispenser';
import Token from './contracts/Token';
import { Condition, LockRewardCondition, EscrowReward, AccessSecretStoreCondition, ComputeExecutionCondition } from './contracts/conditions';
import { AgreementTemplate, EscrowAccessSecretStoreTemplate, EscrowComputeExecutionTemplate } from './contracts/templates';
import { TemplateStoreManager, AgreementStoreManager, ConditionStoreManager } from './contracts/managers';
import { EventHandler } from './EventHandler';
import { Instantiable, InstantiableConfig } from '../Instantiable.abstract';
export declare class Keeper extends Instantiable {
    static getInstance(config: InstantiableConfig): Promise<Keeper>;
    connected: boolean;
    token: Token;
    dispenser: Dispenser;
    didRegistry: DIDRegistry;
    templateStoreManager: TemplateStoreManager;
    agreementStoreManager: AgreementStoreManager;
    conditionStoreManager: ConditionStoreManager;
    conditions: {
        lockRewardCondition: LockRewardCondition;
        escrowReward: EscrowReward;
        accessSecretStoreCondition: AccessSecretStoreCondition;
        computeExecutionCondition: ComputeExecutionCondition;
    };
    templates: {
        escrowAccessSecretStoreTemplate: EscrowAccessSecretStoreTemplate;
        escrowComputeExecutionTemplate: EscrowComputeExecutionTemplate;
    };
    utils: {
        eventHandler: EventHandler;
    };
    private instances;
    getConditionByAddress(address: string): Condition;
    getTemplateByName(name: string): AgreementTemplate;
    getTemplateByAddress(address: string): AgreementTemplate;
    getNetworkId(): Promise<number>;
    getNetworkName(): Promise<string>;
    getAllInstances(): {
        [contractRef: string]: any;
    };
}
export default Keeper;
