"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionStoreManager = void 0;
const ContractBase_1 = __importDefault(require("../ContractBase"));
const utils_1 = require("../../../utils");
class ConditionStoreManager extends ContractBase_1.default {
    static getInstance(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const templateStoreManeger = new ConditionStoreManager('ConditionStoreManager');
            yield templateStoreManeger.init(config);
            return templateStoreManeger;
        });
    }
    getOwner() {
        return this.call('owner', []);
    }
    getCondition(conditionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { typeRef, state, timeLock, timeOut, blockNumber, lastUpdatedBy, blockNumberUpdated } = yield this.call('getCondition', [utils_1.zeroX(conditionId)]);
            return {
                typeRef,
                state: +state,
                timeLock: +timeLock,
                timeOut: +timeOut,
                blockNumber: +blockNumber,
                lastUpdatedBy,
                blockNumberUpdated: +blockNumberUpdated
            };
        });
    }
}
exports.ConditionStoreManager = ConditionStoreManager;
//# sourceMappingURL=ConditionStoreManager.js.map