import { TransactionReceipt } from 'web3-core';
import ContractBase from './ContractBase';
import { InstantiableConfig } from '../../Instantiable.abstract';
export declare enum ProvenanceMethod {
    ENTITY = 0,
    ACTIVITY = 1,
    WAS_GENERATED_BY = 2,
    USED = 3,
    WAS_INFORMED_BY = 4,
    WAS_STARTED_BY = 5,
    WAS_ENDED_BY = 6,
    WAS_INVALIDATED_BY = 7,
    WAS_DERIVED_FROM = 8,
    AGENT = 9,
    WAS_ATTRIBUTED_TO = 10,
    WAS_ASSOCIATED_WITH = 11,
    ACTED_ON_BEHALF = 12
}
export interface ProvenanceRegistry {
    did: string;
    relatedDid: string;
    agentId: string;
    activityId: string;
    agentInvolvedId: string;
    method: ProvenanceMethod;
    createdBy: string;
    blockNumberUpdated: number;
    signatureDelegate: string;
}
export interface ProvenanceAttributeRegisteredEvent {
    provId: string;
    did: string;
    agentId: string;
    activityId: string;
    relatedDid: string;
    agentInvolvedId: string;
    method: ProvenanceMethod;
    attributes: string;
    blockNumberUpdated: number;
}
interface ProvenanceBaseEvent {
    event: string;
    method: ProvenanceMethod;
    activityId: string;
    provId: string;
    attributes: string;
    blockNumberUpdated: number;
}
export interface WasGeneratedByEvent extends ProvenanceBaseEvent {
    did: string;
    agentId: string;
}
export interface UsedEvent extends ProvenanceBaseEvent {
    did: string;
    agentId: string;
}
export interface WasDerivedFromEvent extends ProvenanceBaseEvent {
    newEntityDid: string;
    usedEntityDid: string;
    agentId: string;
}
export interface WasAssociatedWithEvent extends ProvenanceBaseEvent {
    entityDid: string;
    agentId: string;
}
export interface ActedOnBehalfEvent extends ProvenanceBaseEvent {
    entityDid: string;
    delegateAgentId: string;
    responsibleAgentId: string;
}
export declare type ProvenanceEvent<T extends ProvenanceMethod | any = any> = T extends ProvenanceMethod.WAS_GENERATED_BY ? WasGeneratedByEvent : T extends ProvenanceMethod.USED ? UsedEvent : T extends ProvenanceMethod.WAS_DERIVED_FROM ? WasDerivedFromEvent : T extends ProvenanceMethod.WAS_ASSOCIATED_WITH ? WasAssociatedWithEvent : T extends ProvenanceMethod.ACTED_ON_BEHALF ? ActedOnBehalfEvent : WasGeneratedByEvent | UsedEvent | WasDerivedFromEvent | WasAssociatedWithEvent | ActedOnBehalfEvent;
export default class DIDRegistry extends ContractBase {
    static getInstance(config: InstantiableConfig): Promise<DIDRegistry>;
    registerAttribute(did: string, checksum: string, providers: string[], value: string, ownerAddress: string): Promise<TransactionReceipt>;
    registerDID(did: string, checksum: string, providers: string[], value: string, activityId: string, attributes: string, ownerAddress: string): Promise<TransactionReceipt>;
    getDIDOwner(did: string): Promise<string>;
    getBlockNumberUpdated(did: string): Promise<number>;
    isDIDProvider(did: string, provider: string): Promise<string>;
    getAttributesByOwner(owner: string): Promise<string[]>;
    getAttributesByDid(did: string): Promise<{
        did: string;
        serviceEndpoint: string;
        checksum: string;
    }>;
    grantPermission(did: string, grantee: string, ownerAddress: string): Promise<TransactionReceipt>;
    revokePermission(did: string, grantee: string, ownerAddress: string): Promise<TransactionReceipt>;
    getPermission(did: string, grantee: string): Promise<boolean>;
    transferDIDOwnership(did: string, newOwnerAddress: string, ownerAddress: string): Promise<TransactionReceipt>;
    getDIDProvenanceEvents(did: string): Promise<{
        method: number;
        provId: string;
        did: string;
        agentId: string;
        activityId: string;
        relatedDid: string;
        agentInvolvedId: string;
        attributes: string;
        blockNumberUpdated: number;
    }[]>;
    getDIDProvenanceMethodEvents<T extends ProvenanceMethod>(did: string, method: T): Promise<ProvenanceEvent<T>[]>;
    getProvenanceEntry(provId: string): Promise<ProvenanceRegistry>;
    used(provId: string, did: string, agentId: string, activityId: string, signatureUsing: string, attributes: string, ownerAddress: string): Promise<TransactionReceipt>;
    wasDerivedFrom(provId: string, newEntityDid: string, usedEntityDid: string, agentId: string, activityId: string, attributes: string, ownerAddress: string): Promise<TransactionReceipt>;
    wasAssociatedWith(provId: string, did: string, agentId: string, activityId: string, attributes: string, ownerAddress: string): Promise<TransactionReceipt>;
    actedOnBehalf(provId: string, did: string, delegateAgentId: string, responsibleAgentId: string, activityId: string, signatureDelegate: string, attributes: string, ownerAddress: string): Promise<TransactionReceipt>;
    addDidProvenanceDelegate(did: string, delegateAddress: string, ownerAddress: string): Promise<TransactionReceipt>;
    removeDidProvenanceDelegate(did: string, delegateAddress: string, ownerAddress: string): Promise<TransactionReceipt>;
    isProvenanceDelegate(did: string, delegateAddress: string): Promise<unknown>;
    getProvenanceOwner(did: string): Promise<unknown>;
    mint(did: string, amount: number, from: string): Promise<TransactionReceipt>;
    burn(did: string, amount: number, from: string): Promise<TransactionReceipt>;
    transferNft(did: string, to: string, amount: number, from: string): Promise<TransactionReceipt>;
    balance(address: string, did: string): Promise<number>;
    addProvider(did: string, provider: string, from: string): Promise<TransactionReceipt>;
    removeProvider(did: string, provider: string, from: string): Promise<TransactionReceipt>;
    getProviders(did: string): Promise<any>;
}
export {};
