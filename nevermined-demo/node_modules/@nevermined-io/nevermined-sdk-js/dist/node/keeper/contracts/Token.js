"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ContractBase_1 = __importDefault(require("./ContractBase"));
class Token extends ContractBase_1.default {
    static getInstance(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = new Token(process.env.TOKEN_CONTRACT_NAME || 'NeverminedToken', true);
            yield token.init(config);
            return token;
        });
    }
    approve(to, price, from) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendFrom('approve', [to, String(price)], from);
        });
    }
    decimals() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('decimals', []);
        });
    }
    balanceOf(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('balanceOf', [address]).then((balance) => new bignumber_js_1.default(balance).toNumber());
        });
    }
    symbol() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('symbol', []);
        });
    }
    name() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('name', []);
        });
    }
    totalSupply() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('totalSupply', []);
        });
    }
    transfer(to, amount, from) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('transfer', from, [to, amount]);
        });
    }
}
exports.default = Token;
//# sourceMappingURL=Token.js.map