"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateStoreManager = exports.TemplateState = void 0;
const ContractBase_1 = __importDefault(require("../ContractBase"));
const utils_1 = require("../../../utils");
var TemplateState;
(function (TemplateState) {
    TemplateState[TemplateState["Uninitialized"] = 0] = "Uninitialized";
    TemplateState[TemplateState["Proposed"] = 1] = "Proposed";
    TemplateState[TemplateState["Approved"] = 2] = "Approved";
    TemplateState[TemplateState["Revoked"] = 3] = "Revoked";
})(TemplateState = exports.TemplateState || (exports.TemplateState = {}));
class TemplateStoreManager extends ContractBase_1.default {
    static getInstance(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const templateStoreManeger = new TemplateStoreManager('TemplateStoreManager');
            yield templateStoreManeger.init(config);
            return templateStoreManeger;
        });
    }
    getOwner() {
        return this.call('owner', []);
    }
    proposeTemplate(address, from, ignoreExists) {
        return __awaiter(this, void 0, void 0, function* () {
            const template = yield this.getTemplate(address);
            if (template.blockNumberUpdated !== 0) {
                this.logger.warn(`Template "${address}" already exist.`);
                if (!ignoreExists) {
                    throw new Error('Template already exist.');
                }
            }
            else {
                return this.sendFrom('proposeTemplate', [utils_1.zeroX(address)], from);
            }
        });
    }
    approveTemplate(address, from, ignoreApproved) {
        return __awaiter(this, void 0, void 0, function* () {
            const template = yield this.getTemplate(address);
            if (template.state !== TemplateState.Proposed) {
                this.logger.warn(`Template "${address}" is not in "proposed" state.`);
                if (!ignoreApproved) {
                    throw new Error(`Template not in "proposed" state.`);
                }
            }
            else {
                return this.sendFrom('approveTemplate', [utils_1.zeroX(address)], from);
            }
        });
    }
    revokeTemplate(address, from) {
        return this.sendFrom('revokeTemplate', [utils_1.zeroX(address)], from);
    }
    getTemplate(templateId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { state, owner, lastUpdatedBy, blockNumberUpdated } = yield this.call('getTemplate', [utils_1.zeroX(templateId)]);
            return {
                state: +state,
                owner,
                lastUpdatedBy,
                blockNumberUpdated: +blockNumberUpdated
            };
        });
    }
    isApproved(templateId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.call('isTemplateApproved', [templateId]);
        });
    }
    getListSize() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.call('getListSize', []);
        });
    }
}
exports.TemplateStoreManager = TemplateStoreManager;
//# sourceMappingURL=TemplateStoreManager.js.map