"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Condition = exports.conditionStateNames = exports.ConditionState = void 0;
const ContractBase_1 = __importDefault(require("../ContractBase"));
const utils_1 = require("../../../utils");
var ConditionState;
(function (ConditionState) {
    ConditionState[ConditionState["Uninitialized"] = 0] = "Uninitialized";
    ConditionState[ConditionState["Unfulfilled"] = 1] = "Unfulfilled";
    ConditionState[ConditionState["Fulfilled"] = 2] = "Fulfilled";
    ConditionState[ConditionState["Aborted"] = 3] = "Aborted";
})(ConditionState = exports.ConditionState || (exports.ConditionState = {}));
exports.conditionStateNames = [
    'Uninitialized',
    'Unfulfilled',
    'Fulfilled',
    'Aborted'
];
class Condition extends ContractBase_1.default {
    static getInstance(config, conditionName, conditionsClass) {
        return __awaiter(this, void 0, void 0, function* () {
            const condition = new conditionsClass(conditionName);
            yield condition.init(config);
            return condition;
        });
    }
    constructor(contractName) {
        super(contractName);
    }
    hashValues(...args) {
        return this.call('hashValues', args);
    }
    fulfill(agreementId, args, from) {
        return this.sendFrom('fulfill', [utils_1.zeroX(agreementId), ...args], from);
    }
    generateIdHash(agreementId, ...values) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.generateId(agreementId, yield this.hashValues(...values));
        });
    }
    generateId(agreementId, valueHash) {
        return this.call('generateId', [utils_1.zeroX(agreementId), valueHash]);
    }
    abortByTimeOut(agreementId, from) {
        return this.sendFrom('abortByTimeOut', [utils_1.zeroX(agreementId)], from);
    }
    getConditionFulfilledEvent(agreementId) {
        return this.getEvent('Fulfilled', { agreementId: utils_1.zeroX(agreementId) });
    }
}
exports.Condition = Condition;
//# sourceMappingURL=Condition.abstract.js.map