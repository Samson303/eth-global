"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvenanceMethod = void 0;
const ContractBase_1 = __importDefault(require("./ContractBase"));
const utils_1 = require("../../utils");
const crypto_1 = require("crypto");
var ProvenanceMethod;
(function (ProvenanceMethod) {
    ProvenanceMethod[ProvenanceMethod["ENTITY"] = 0] = "ENTITY";
    ProvenanceMethod[ProvenanceMethod["ACTIVITY"] = 1] = "ACTIVITY";
    ProvenanceMethod[ProvenanceMethod["WAS_GENERATED_BY"] = 2] = "WAS_GENERATED_BY";
    ProvenanceMethod[ProvenanceMethod["USED"] = 3] = "USED";
    ProvenanceMethod[ProvenanceMethod["WAS_INFORMED_BY"] = 4] = "WAS_INFORMED_BY";
    ProvenanceMethod[ProvenanceMethod["WAS_STARTED_BY"] = 5] = "WAS_STARTED_BY";
    ProvenanceMethod[ProvenanceMethod["WAS_ENDED_BY"] = 6] = "WAS_ENDED_BY";
    ProvenanceMethod[ProvenanceMethod["WAS_INVALIDATED_BY"] = 7] = "WAS_INVALIDATED_BY";
    ProvenanceMethod[ProvenanceMethod["WAS_DERIVED_FROM"] = 8] = "WAS_DERIVED_FROM";
    ProvenanceMethod[ProvenanceMethod["AGENT"] = 9] = "AGENT";
    ProvenanceMethod[ProvenanceMethod["WAS_ATTRIBUTED_TO"] = 10] = "WAS_ATTRIBUTED_TO";
    ProvenanceMethod[ProvenanceMethod["WAS_ASSOCIATED_WITH"] = 11] = "WAS_ASSOCIATED_WITH";
    ProvenanceMethod[ProvenanceMethod["ACTED_ON_BEHALF"] = 12] = "ACTED_ON_BEHALF";
})(ProvenanceMethod = exports.ProvenanceMethod || (exports.ProvenanceMethod = {}));
class DIDRegistry extends ContractBase_1.default {
    static getInstance(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const didRegistry = new DIDRegistry('DIDRegistry');
            yield didRegistry.init(config);
            return didRegistry;
        });
    }
    registerAttribute(did, checksum, providers, value, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('registerAttribute', ownerAddress, [
                utils_1.didZeroX(did),
                utils_1.zeroX(checksum),
                providers.map(utils_1.zeroX),
                value
            ]);
        });
    }
    registerDID(did, checksum, providers, value, activityId, attributes, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('registerDID', ownerAddress, [
                utils_1.didZeroX(did),
                utils_1.zeroX(checksum),
                providers.map(utils_1.zeroX),
                value,
                utils_1.zeroX(activityId),
                attributes
            ]);
        });
    }
    getDIDOwner(did) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getDIDOwner', [utils_1.didZeroX(did)]);
        });
    }
    getBlockNumberUpdated(did) {
        return __awaiter(this, void 0, void 0, function* () {
            return +(yield this.call('getBlockNumberUpdated', [utils_1.zeroX(did)]));
        });
    }
    isDIDProvider(did, provider) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('isDIDProvider', [utils_1.didZeroX(did), utils_1.zeroX(provider)]);
        });
    }
    getAttributesByOwner(owner) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPastEvents('DIDAttributeRegistered', {
                _owner: utils_1.zeroX(owner)
            }))
                .map(({ returnValues }) => returnValues._did)
                .map(utils_1.didPrefixed);
        });
    }
    getAttributesByDid(did) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPastEvents('DIDAttributeRegistered', {
                _did: utils_1.didZeroX(did)
            })).map(({ returnValues: { _did, _checksum: checksum, _value: serviceEndpoint } }) => ({
                did: utils_1.didPrefixed(_did),
                serviceEndpoint,
                checksum
            }))[0];
        });
    }
    grantPermission(did, grantee, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('grantPermission', ownerAddress, [utils_1.didZeroX(did), utils_1.zeroX(grantee)]);
        });
    }
    revokePermission(did, grantee, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('revokePermission', ownerAddress, [utils_1.zeroX(did), utils_1.zeroX(grantee)]);
        });
    }
    getPermission(did, grantee) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getPermission', [utils_1.didZeroX(did), utils_1.zeroX(grantee)]);
        });
    }
    transferDIDOwnership(did, newOwnerAddress, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('transferDIDOwnership', ownerAddress, [
                utils_1.didZeroX(did),
                utils_1.zeroX(newOwnerAddress)
            ]);
        });
    }
    getDIDProvenanceEvents(did) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPastEvents('ProvenanceAttributeRegistered', { _did: utils_1.didZeroX(did) }))
                .map(({ returnValues }) => utils_1.eventToObject(returnValues))
                .map(event => (Object.assign(Object.assign({}, event), { method: +event.method })));
        });
    }
    getDIDProvenanceMethodEvents(did, method) {
        return __awaiter(this, void 0, void 0, function* () {
            const capitalize = string => string
                .replace(/([a-z]+)(?:_|$)/ig, (_, w) => w.charAt(0).toUpperCase() + w.toLowerCase().slice(1));
            let filter = { _did: utils_1.didZeroX(did) };
            switch (method) {
                case ProvenanceMethod.ACTED_ON_BEHALF:
                case ProvenanceMethod.WAS_ASSOCIATED_WITH:
                    filter = { _entityDid: utils_1.didZeroX(did) };
                    break;
                case ProvenanceMethod.WAS_DERIVED_FROM:
                    filter = { _usedEntityDid: utils_1.didZeroX(did) };
                    break;
            }
            return (yield this.getPastEvents(capitalize(ProvenanceMethod[method]), filter))
                .map(({ returnValues }) => utils_1.eventToObject(returnValues));
        });
    }
    getProvenanceEntry(provId) {
        return __awaiter(this, void 0, void 0, function* () {
            const provenance = yield this.call('getProvenanceEntry', [utils_1.zeroX(provId)]);
            if (provenance.did.match(/^0x0+$/)) {
                return;
            }
            return provenance;
        });
    }
    used(provId, did, agentId, activityId, signatureUsing, attributes, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('used', ownerAddress, [
                utils_1.zeroX(provId),
                utils_1.didZeroX(did),
                utils_1.zeroX(agentId),
                utils_1.zeroX(activityId),
                utils_1.zeroX(signatureUsing),
                attributes
            ]);
        });
    }
    wasDerivedFrom(provId, newEntityDid, usedEntityDid, agentId, activityId, attributes, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('wasDerivedFrom', ownerAddress, [
                utils_1.zeroX(provId),
                utils_1.zeroX(newEntityDid),
                utils_1.zeroX(usedEntityDid),
                utils_1.zeroX(agentId),
                utils_1.zeroX(activityId),
                attributes
            ]);
        });
    }
    wasAssociatedWith(provId, did, agentId, activityId, attributes, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('wasAssociatedWith', ownerAddress, [
                utils_1.zeroX(provId),
                utils_1.didZeroX(did),
                utils_1.zeroX(agentId),
                utils_1.zeroX(activityId),
                attributes
            ]);
        });
    }
    actedOnBehalf(provId, did, delegateAgentId, responsibleAgentId, activityId, signatureDelegate, attributes, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('actedOnBehalf', ownerAddress, [
                utils_1.zeroX(provId),
                utils_1.didZeroX(did),
                utils_1.zeroX(delegateAgentId),
                utils_1.zeroX(responsibleAgentId),
                utils_1.zeroX(activityId),
                utils_1.zeroX(signatureDelegate),
                attributes
            ]);
        });
    }
    addDidProvenanceDelegate(did, delegateAddress, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('addDIDProvenanceDelegate', ownerAddress, [
                utils_1.didZeroX(did),
                utils_1.zeroX(delegateAddress)
            ]);
        });
    }
    removeDidProvenanceDelegate(did, delegateAddress, ownerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('removeDIDProvenanceDelegate', ownerAddress, [
                utils_1.didZeroX(did),
                utils_1.zeroX(delegateAddress)
            ]);
        });
    }
    isProvenanceDelegate(did, delegateAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('isProvenanceDelegate', [
                utils_1.didZeroX(did),
                utils_1.zeroX(delegateAddress)
            ]);
        });
    }
    getProvenanceOwner(did) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getProvenanceOwner', [
                utils_1.didZeroX(did)
            ]);
        });
    }
    mint(did, amount, from) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('mint', from, [
                utils_1.didZeroX(did),
                amount
            ]);
        });
    }
    burn(did, amount, from) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('burn', from, [
                utils_1.didZeroX(did),
                amount
            ]);
        });
    }
    transferNft(did, to, amount, from) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('safeTransferFrom', from, [from, to, utils_1.didZeroX(did), amount, crypto_1.randomBytes]);
        });
    }
    balance(address, did) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('balanceOf', [utils_1.zeroX(address), utils_1.didZeroX(did)]);
        });
    }
    addProvider(did, provider, from) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.send('addDIDProvider', from, [
                utils_1.didZeroX(did),
                utils_1.zeroX(provider)
            ]);
        });
    }
    removeProvider(did, provider, from) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.send('removeDIDProvider', from, [
                utils_1.didZeroX(did),
                utils_1.zeroX(provider)
            ]);
        });
    }
    getProviders(did) {
        return __awaiter(this, void 0, void 0, function* () {
            const registeredValues = yield this.call('getDIDRegister', [utils_1.didZeroX(did)]);
            return registeredValues[5].filter((x) => x != '0x0000000000000000000000000000000000000000');
        });
    }
}
exports.default = DIDRegistry;
//# sourceMappingURL=DIDRegistry.js.map