"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractEvent = void 0;
class ContractEvent {
    constructor(eventEmitter, contract, eventName, filter) {
        this.eventEmitter = eventEmitter;
        this.contract = contract;
        this.eventName = eventName;
        this.filter = filter;
    }
    subscribe(callback) {
        const onEvent = (blockNumber) => __awaiter(this, void 0, void 0, function* () {
            const events = yield this.contract.getEventData(this.eventName, {
                filter: this.filter,
                fromBlock: blockNumber,
                toBlock: 'latest'
            });
            if (events.length) {
                callback(events);
            }
        });
        this.eventEmitter.subscribe(onEvent);
        return {
            unsubscribe: () => this.eventEmitter.unsubscribe(onEvent)
        };
    }
    once(callback) {
        return new Promise((resolve) => {
            const subscription = this.subscribe(events => {
                subscription.unsubscribe();
                if (callback) {
                    callback(events);
                }
                resolve(events);
            });
        });
    }
}
exports.ContractEvent = ContractEvent;
//# sourceMappingURL=ContractEvent.js.map