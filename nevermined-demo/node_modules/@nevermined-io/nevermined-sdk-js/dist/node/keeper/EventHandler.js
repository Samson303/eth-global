"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventHandler = void 0;
const ContractEvent_1 = require("./ContractEvent");
const Instantiable_abstract_1 = require("../Instantiable.abstract");
class EventHandler extends Instantiable_abstract_1.Instantiable {
    constructor(config) {
        super();
        this.events = new Set();
        this.interval = 200;
        this.polling = false;
        this.setInstanceConfig(config);
    }
    get count() {
        return this.events.size;
    }
    subscribe(callback) {
        this.events.add(callback);
        this.checkBlock();
        return {
            unsubscribe: () => this.unsubscribe(callback)
        };
    }
    unsubscribe(callback) {
        this.events.delete(callback);
        if (!this.count) {
            clearTimeout(this.lastTimeout);
            delete this.lastBlock;
            this.polling = false;
        }
    }
    getEvent(contract, eventName, filter) {
        return new ContractEvent_1.ContractEvent(this, contract, eventName, filter);
    }
    checkBlock(isInterval, n = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            const blockNumber = yield this.web3.eth.getBlockNumber();
            if ((this.polling && !isInterval) || !this.count) {
                return;
            }
            this.polling = true;
            if (!this.lastBlock) {
                this.lastBlock = blockNumber;
            }
            if (this.lastBlock !== blockNumber) {
                this.events.forEach(fn => fn(this.lastBlock + 1));
                this.lastBlock = blockNumber;
            }
            this.lastTimeout = global.setTimeout(() => this.checkBlock(true, n++), this.interval);
        });
    }
}
exports.EventHandler = EventHandler;
//# sourceMappingURL=EventHandler.js.map