"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var node_fetch_1 = require("node-fetch");
var HexHelper_1 = require("./tools/HexHelper");
var ParityClient = (function () {
    function ParityClient(config) {
        this.password = config.password;
        this.address = config.address;
        this.url = config.url;
    }
    ParityClient.prototype.signKeyId = function (keyId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendJsonRpcRequest("secretstore_signRawHash", [this.address, this.password, HexHelper_1["default"].add0xPrefix(keyId)])
                        .then(function (result) {
                        return result;
                    })];
            });
        });
    };
    ParityClient.prototype.generateDocumentKeyFromServerKey = function (serverKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendJsonRpcRequest("secretstore_generateDocumentKey", [this.address, this.password, serverKey])
                        .then(function (result) {
                        var generatedKey = {
                            commonPoint: result.common_point,
                            encryptedKey: result.encrypted_key,
                            encryptedPoint: result.encrypted_point
                        };
                        return generatedKey;
                    })];
            });
        });
    };
    ParityClient.prototype.encryptDocument = function (encryptedKey, document) {
        var documentString = JSON.stringify(document, null, 2);
        var documentHexed = HexHelper_1["default"].add0xPrefix(Buffer.from(documentString).toString("hex"));
        return this.sendJsonRpcRequest("secretstore_encrypt", [this.address, this.password, encryptedKey, documentHexed])
            .then(function (result) {
            return result;
        });
    };
    ParityClient.prototype.decryptDocument = function (decryptedSecret, commonPoint, decryptShadows, encryptedDocument) {
        return this.sendJsonRpcRequest("secretstore_shadowDecrypt", [this.address, this.password, decryptedSecret,
            commonPoint, decryptShadows, encryptedDocument])
            .then(function (result) {
            var documentString = Buffer
                .from(HexHelper_1["default"].removeLeading0xPrefix(result), "hex")
                .toString("utf8");
            try {
                documentString = JSON.parse(documentString);
            }
            catch (_a) {
            }
            return documentString;
        });
    };
    ParityClient.prototype.sendJsonRpcRequest = function (methodName, paramsList) {
        return node_fetch_1["default"](this.url, {
            method: "POST",
            mode: "cors",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                jsonrpc: "2.0",
                method: methodName,
                params: paramsList,
                id: 1
            })
        })
            .then(function (response) {
            if (response.ok) {
                return response.json();
            }
            throw new Error("Calling method \"" + methodName + "\" on parity client failed with " + response.statusText);
        })
            .then(function (result) {
            if (result.result) {
                return result.result;
            }
            throw new Error("Parity node returned an error " + result.error.message + " " + result.error.data);
        })["catch"](function (err) {
            throw new Error("Calling method \"" + methodName + "\" on parity client failed. " + err);
        });
    };
    return ParityClient;
}());
exports["default"] = ParityClient;
//# sourceMappingURL=ParityClient.js.map