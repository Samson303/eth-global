"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var node_fetch_1 = require("node-fetch");
var HexHelper_1 = require("./tools/HexHelper");
var SecretStoreClient = (function () {
    function SecretStoreClient(config) {
        this.url = config.url;
        this.threshold = config.threshold;
    }
    SecretStoreClient.prototype.generateServerKey = function (serverKeyId, serverKeyIdSig) {
        return __awaiter(this, void 0, void 0, function () {
            var url, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = [
                            this.url, "shadow", serverKeyId,
                            HexHelper_1["default"].removeLeading0xPrefix(serverKeyIdSig),
                            this.threshold,
                        ].join("/");
                        return [4, node_fetch_1["default"](url, {
                                method: "POST",
                                mode: "cors",
                                headers: {
                                    "Accept": "application/json",
                                    "Content-Type": "application/json"
                                }
                            })
                                .then(function (response) {
                                if (response.ok) {
                                    return response.json();
                                }
                                throw Error("Unable to generate Server Key " + response.statusText);
                            })["catch"](function (error) {
                                throw Error("Unable to generate Server Key: " + error.message);
                            })];
                    case 1:
                        result = _a.sent();
                        if (!result) {
                            throw Error("Unable to generate Server Key");
                        }
                        return [2, result];
                }
            });
        });
    };
    SecretStoreClient.prototype.storeDocumentKey = function (serverKeyId, serverKeyIdSig, commonPoint, encryptedPoint) {
        return __awaiter(this, void 0, void 0, function () {
            var url, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = [this.url, "shadow", serverKeyId, HexHelper_1["default"].removeLeading0xPrefix(serverKeyIdSig),
                            HexHelper_1["default"].removeLeading0xPrefix(commonPoint), HexHelper_1["default"].removeLeading0xPrefix(encryptedPoint)]
                            .join("/");
                        return [4, node_fetch_1["default"](url, {
                                method: "POST",
                                mode: "cors",
                                headers: {
                                    "Accept": "application/json",
                                    "Content-Type": "application/json"
                                }
                            })
                                .then(function (response) {
                                if (response.ok && response.status === 200) {
                                    return true;
                                }
                                throw Error("Unable to store document Keys " + response.statusText);
                            })["catch"](function (error) {
                                throw Error("Unable to store document keys: " + error.message);
                            })];
                    case 1:
                        result = _a.sent();
                        if (!result) {
                            throw Error("Unable to store document Keys");
                        }
                        return [2, result];
                }
            });
        });
    };
    SecretStoreClient.prototype.retrieveDocumentKey = function (serverKeyId, serverKeyIdSig) {
        return __awaiter(this, void 0, void 0, function () {
            var url, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = [this.url, "shadow", serverKeyId, HexHelper_1["default"].removeLeading0xPrefix(serverKeyIdSig)]
                            .join("/");
                        return [4, node_fetch_1["default"](url, {
                                method: "GET"
                            })
                                .then(function (response) {
                                if (response.ok) {
                                    return response.json();
                                }
                                throw Error("Unable to retrieve decryption Keys " + response.statusText);
                            })
                                .then(function (data) {
                                return {
                                    commonPoint: data.common_point,
                                    decryptedSecret: data.decrypted_secret,
                                    decryptShadows: data.decrypt_shadows
                                };
                            })["catch"](function (e) {
                                throw Error("Unable to retrieve decryption keys: " + e.message);
                            })];
                    case 1:
                        result = _a.sent();
                        if (!result) {
                            throw Error("Unable to retrieve decryption Keys");
                        }
                        return [2, result];
                }
            });
        });
    };
    return SecretStoreClient;
}());
exports["default"] = SecretStoreClient;
//# sourceMappingURL=SecretStoreClient.js.map